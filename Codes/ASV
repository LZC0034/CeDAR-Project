Step 1. Importing data
source activate /share/apps/bio3user/miniconda3/envs/qiime2-2021.8
qiime tools import --type SampleData[PairedEndSequencesWithQuality] --input-path LiaoRL21_raw_data --input-format CasavaOneEightSingleLanePerSampleDirFmt --output-path step1_importing_data/LiaoRl21_demux-paired-end.qza

Step 2. Removing primers
source activate /share/apps/bio3user/miniconda3/envs/qiime2-2021.8
qiime cutadapt trim-paired --i-demultiplexed-sequences step1_importing_data/LiaoRl21_demux-paired-end.qza --p-front-f CCTACGGGNGGCWGCAG --p-front-r GACTACHVGGGTATCTAATCC --p-cores 2 --o-trimmed-sequences step2_removing_primers/LiaoRl21_trimmed-seqs.qza --p-error-rate 0 –verbose
qiime demux summarize --i-data step2_ removing_primers/LiaoRl21_trimmed-seqs.qza --o-visualization step2_ removing_primers/LiaoRl21_trimmed-seqs.qzv

Step 3. Denoising and generating ASV tables
source activate /share/apps/bio3user/miniconda3/envs/qiime2-2021.8
qiime dada2 denoise-paired --i-demultiplexed-seqs step2_ removing_primers/LiaoRl21_trimmed-seqs.qza --p-trim-left-f 0 --p-trim-left-r 0  --p-trunc-len-f 280 --p-trunc-len-r 200 --o-table step3_denoising/LiaoRl21_table.qza --o-representative-sequences step3_denoising/LiaoRl21_rep-seqs.qza --o-denoising-stats step3_denoising/LiaoRl21_denoising-stats.qza
qiime tools export --input-path step3_denoising/LiaoRl21_table.qza --output-path step3_denoising/LiaoRl21_exported-feature-table   ##Export table.qza to feature-table.biom##

##Exporting table.qza to feature-table.biom##
qiime tools export --input-path step3_denoising/LiaoRl21_table.qza --output-path step3_denoising/LiaoRl21_exported-feature-table   

##Converting biom to csv##
biom convert -i step3_denoising/LiaoRl21_exported-feature-table/feature-table.biom -o step3_denoising/LiaoRl21_exported-feature-table/LiaoRl21_ASV.csv --to-tsv

Step 4. Constructing classifiers
##Construting machine learning-based classifiers##
setwd("D:/Research/CeDAR/LiaoRl21/LiaoRl21_ASV")
LiaoRl21_ASV<-read.csv("LiaoRl21_ASV.csv")
LiaoRl21_ASV<-LiaoRl21_ASV[,-1]

LiaoRl21_ASV_t<-t(LiaoRl21_ASV)
LiaoRl21_ASV_t<-as.matrix(LiaoRl21_ASV_t)
LiaoRl21_ASV_t<-as.data.frame(LiaoRl21_ASV_t)
names(LiaoRl21_ASV_t)<-LiaoRl21_ASV_t[1,]
LiaoRl21_ASV_t<-LiaoRl21_ASV_t[-1,]
write.csv(LiaoRl21_ASV_t,"LiaoRl21_ASV_t.csv")
LiaoRl21_ASV_t<-read.csv("LiaoRl21_ASV_t.csv")

library(dplyr)
LiaoRl21_safety_metadata<-read.csv("LiaoRl21_safety_metadata.csv")
LiaoRl21_ASV_factors<- LiaoRl21_safety_metadata[,c(2,3,5)]
LiaoRl21_ASV_tnew<-cbind(LiaoRl21_ASV_factors,LiaoRl21_ASV_t[,2:2511])
LiaoRl21_ASV_tnew2<-cbind(LiaoRl21_safety_metadata[1],LiaoRl21_ASV_tnew)
write.csv(LiaoRl21_ASV_tnew2,"LiaoRl21_ASV_tnew.csv",na="0")
LiaoRl21_ASV_tnew<-read.csv("LiaoRl21_ASV_tnew.csv")
LiaoRl21_ASV_tnew<-LiaoRl21_ASV_tnew[,-1]

##Normalizing data using common sum scaling (CSS) method##
sumrow<-rowSums(LiaoRl21_ASV_tnew[,5:2514])
scaling_ratio <- min(sumrow)/sumrow
LiaoRl21_ASV_matrix<-LiaoRl21_ASV_tnew[,5:2514]
LiaoRl21_ASV_css<-scaling_ratio*LiaoRl21_ASV_matrix
LiaoRl21_ASV_css_full<-cbind(LiaoRl21_ASV_tnew[,1:4],Liaorl21_ASV_css)
write.csv(LiaoRl21_ASV_css_full,"LiaoRl21_ASV_css_full.csv")

##Conducting confounding effect removal (cer) using ComBat function in ‘sva’ R package##
LiaoRl21_ASV_css_full<-read.csv("LiaoRl21_ASV_css_full.csv")
LiaoRl21_ASV_css_full<-LiaoRl21_ASV_css_full[,-1]
library(sva) 
Brand<-as.factor(LiaoRl21_ASV_css_full$Brand)
Days<-as.factor(LiaoRl21_ASV_css_full$Days)
Season<-as.factor(LiaoRl21_ASV_css_full$Season)
Group<-as.factor(LiaoRl21_ASV_css_full$Group)

LiaoRl21_ASV_css_t<-t(LiaoRl21_ASV_css_full[,5:2514])
LiaoRl21_ASV_css_br = ComBat(dat=LiaoRl21_ASV_css_t, batch=Brand, mod=NULL, par.prior=FALSE, mean.only=TRUE)  #br means brand effect removal#
LiaoRl21_ASV_css_bdr = ComBat(dat=LiaoRl21_ASV_css_br, batch=Days, mod=NULL, par.prior=FALSE, mean.only=TRUE)  #bdr means brand and day effect removal#
LiaoRl21_ASV_css_bdsr = ComBat(dat=LiaoRl21_ASV_css_bdr, batch=Season, mod=NULL, par.prior=FALSE, mean.only=TRUE)  #bdr means brand and day effect removal#
LiaoRl21_ASV_css_bdsrt<-t(LiaoRl21_ASV_css_bdsr)
LiaoRl21_ASV_css_bdsrt_full<-cbind(LiaoRl21_ASV_css_full[,1:5],LiaoRl21_ASV_css_bdsrt)
write.csv(LiaoRl21_ASV_css_bdsrt_full,"LiaoRl21_ASV_css_bdsrt_full.csv")

##Building random forests (RF)-based model with Out-of-bag (OOB) validation method##
library(randomForest)
LiaoRl1_ASV_css_bdsrt_full<-read.csv("LiaoRl21_ASV_css_bdsrt_full.csv")
LiaoRl21_ASV_css_bdsrt_full<-LiaoRl21_ASV_css_bdsrt_full[,-1]
Brand<-as.factor(LiaoRl21_ASV_css_bdsrt_full$Brand)
Days<-as.factor(LiaoRl21_ASV_css_bdsrt_full$Days)
Season<-as.factor(LiaoRl21_ASV_css_bdsrt_full$Season)
Group<-as.factor(LiaoRl21_ASV_css_bdsrt_full$Group)
LiaoRl21_ASV_g_rf <- randomForest(Group~.,data=LiaoRl21_ASV_css_bdsrt_full[,5:2514],importance=TRUE, proximity=TRUE) #OOB validation method is embodied in this R package##Five replicates were conducted#
LiaoRl21_ASV_g_rf #g represents group#

##Building RF-based model with 10-fold cross-validation method##
library(caret)
library(randomForest)
Group<-as.factor(LiaoRl21_ASV_css_bdsrt_full$Group)
trControl <- trainControl(method  = "cv",
                          number = 10)
x<- LiaoRl1_ASV_css_bdsrt_full[,5:2514]
mtry <- sqrt(ncol(x))
LiaoRl21_ASV_g_rf_cv <- train(Group ~ .,
             method     = "rf",
             tuneGrid   = expand.grid(.mtry=mtry),
             trControl  = trControl,
             metric     = "Accuracy",
             MaxNWts=300000,
             data       = LiaoRl1_ASV_css_bdsrt_full[,5:2514])
LiaoRl21_ASV_g_rf_cv

##Building k-nearest neighbors (k-NN)-based model with 10-fold cross-validation method##
library(caret)
library(e1071)
trControl <- trainControl(method  = "cv",
                          number  = 10)
LiaoRl21_ASV_g_knn_cv <- train(Group ~ .,
             method     = "knn",
             tuneGrid   = expand.grid(k = 1:10),
             trControl  = trControl,
             metric     = "Accuracy",
             data       = LiaoRl1_ASV_css_bdsrt_full[,5:2514])
LiaoRl21_ASV_g_knn_cv

##Building neural network (NN)-based model with 10-fold cross-validation method##
library(caret)
library(nnet)
trControl <- trainControl(method  = "cv",
                          number  = 10)
LiaoRl21_ASV_g_nnet_cv <- train(Group ~ .,
             method     = "nnet",
             tuneGrid   = expand.grid(size=5,decay=0.1),
             trControl  = trControl,
             metric     = "Accuracy",
             MaxNWts=300000,
             data       = LiaoRl1_ASV_css_bdsrt_full[,5:2514])
LiaoRl21_ASV_g_nnet_cv
